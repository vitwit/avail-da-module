// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cada/v1beta1/abci.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InjectedData represents a message containing data that has been injected.
type InjectedData struct {
	// PendingBlocks contains information about blocks that are pending.
	PendingBlocks PendingBlocks `protobuf:"bytes,1,opt,name=pending_blocks,json=pendingBlocks,proto3" json:"pending_blocks"`
}

func (m *InjectedData) Reset()         { *m = InjectedData{} }
func (m *InjectedData) String() string { return proto.CompactTextString(m) }
func (*InjectedData) ProtoMessage()    {}
func (*InjectedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c10129946240d9b3, []int{0}
}
func (m *InjectedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InjectedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InjectedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InjectedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectedData.Merge(m, src)
}
func (m *InjectedData) XXX_Size() int {
	return m.Size()
}
func (m *InjectedData) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectedData.DiscardUnknown(m)
}

var xxx_messageInfo_InjectedData proto.InternalMessageInfo

func (m *InjectedData) GetPendingBlocks() PendingBlocks {
	if m != nil {
		return m.PendingBlocks
	}
	return PendingBlocks{}
}

// The PendingBlocks message includes a list of block heights that are currently pending.
type PendingBlocks struct {
	BlockHeights []int64 `protobuf:"varint,1,rep,packed,name=block_heights,json=blockHeights,proto3" json:"block_heights,omitempty"`
}

func (m *PendingBlocks) Reset()         { *m = PendingBlocks{} }
func (m *PendingBlocks) String() string { return proto.CompactTextString(m) }
func (*PendingBlocks) ProtoMessage()    {}
func (*PendingBlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_c10129946240d9b3, []int{1}
}
func (m *PendingBlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingBlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingBlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingBlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingBlocks.Merge(m, src)
}
func (m *PendingBlocks) XXX_Size() int {
	return m.Size()
}
func (m *PendingBlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingBlocks.DiscardUnknown(m)
}

var xxx_messageInfo_PendingBlocks proto.InternalMessageInfo

func (m *PendingBlocks) GetBlockHeights() []int64 {
	if m != nil {
		return m.BlockHeights
	}
	return nil
}

// UnprovenBlock represents a message containing data about a block that has not yet been proven.
type UnprovenBlock struct {
	Height int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Block  []byte `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *UnprovenBlock) Reset()         { *m = UnprovenBlock{} }
func (m *UnprovenBlock) String() string { return proto.CompactTextString(m) }
func (*UnprovenBlock) ProtoMessage()    {}
func (*UnprovenBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c10129946240d9b3, []int{2}
}
func (m *UnprovenBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnprovenBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnprovenBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnprovenBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnprovenBlock.Merge(m, src)
}
func (m *UnprovenBlock) XXX_Size() int {
	return m.Size()
}
func (m *UnprovenBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_UnprovenBlock.DiscardUnknown(m)
}

var xxx_messageInfo_UnprovenBlock proto.InternalMessageInfo

func (m *UnprovenBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *UnprovenBlock) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*InjectedData)(nil), "cada.v1beta1.InjectedData")
	proto.RegisterType((*PendingBlocks)(nil), "cada.v1beta1.PendingBlocks")
	proto.RegisterType((*UnprovenBlock)(nil), "cada.v1beta1.UnprovenBlock")
}

func init() { proto.RegisterFile("cada/v1beta1/abci.proto", fileDescriptor_c10129946240d9b3) }

var fileDescriptor_c10129946240d9b3 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x63, 0x0a, 0x1d, 0x4c, 0xc2, 0x10, 0x55, 0x50, 0x81, 0x64, 0xaa, 0xb0, 0x64, 0xa9,
	0xad, 0x02, 0x2b, 0x4b, 0xc4, 0x10, 0x36, 0x14, 0x09, 0x09, 0xb1, 0x54, 0x4e, 0x62, 0x39, 0x86,
	0xd4, 0xb6, 0x5a, 0x37, 0xc0, 0x5b, 0xf0, 0x58, 0x1d, 0x3b, 0x32, 0x21, 0x94, 0xbc, 0x08, 0x8a,
	0xdd, 0xa1, 0x6c, 0xfe, 0xef, 0xbe, 0x3b, 0x59, 0x07, 0xcf, 0x0a, 0x5a, 0x52, 0xd2, 0xcc, 0x72,
	0x66, 0xe8, 0x8c, 0xd0, 0xbc, 0x10, 0x58, 0x2f, 0x95, 0x51, 0xa1, 0xdf, 0x1b, 0x78, 0x67, 0x9c,
	0x8f, 0xb8, 0xe2, 0xca, 0x1a, 0xa4, 0x7f, 0x39, 0x26, 0x7a, 0x86, 0xfe, 0x83, 0x7c, 0x65, 0x85,
	0x61, 0xe5, 0x3d, 0x35, 0x34, 0x4c, 0xe1, 0x89, 0x66, 0xb2, 0x14, 0x92, 0xcf, 0xf3, 0x5a, 0x15,
	0x6f, 0xab, 0x31, 0x98, 0x80, 0xf8, 0xf8, 0xfa, 0x02, 0xef, 0x97, 0xe1, 0x47, 0xc7, 0x24, 0x16,
	0x49, 0x0e, 0x37, 0x3f, 0x97, 0x5e, 0x16, 0xe8, 0x7d, 0x31, 0xba, 0x85, 0xc1, 0x3f, 0x2a, 0xbc,
	0x82, 0x81, 0xad, 0x9c, 0x57, 0x4c, 0xf0, 0xca, 0xf4, 0xcd, 0x83, 0x78, 0x90, 0xf9, 0x56, 0x4c,
	0x9d, 0x16, 0xdd, 0xc1, 0xe0, 0x49, 0xea, 0xa5, 0x6a, 0x98, 0xb4, 0xb1, 0xf0, 0x14, 0x0e, 0x1d,
	0x6f, 0x3f, 0x32, 0xc8, 0x76, 0x57, 0x38, 0x82, 0x47, 0x36, 0x38, 0x3e, 0x98, 0x80, 0xd8, 0xcf,
	0xdc, 0x91, 0xa4, 0x9b, 0x16, 0x81, 0x6d, 0x8b, 0xc0, 0x6f, 0x8b, 0xc0, 0x57, 0x87, 0xbc, 0x6d,
	0x87, 0xbc, 0xef, 0x0e, 0x79, 0x2f, 0x98, 0x0b, 0x53, 0xad, 0x73, 0x5c, 0xa8, 0x05, 0x69, 0x84,
	0x79, 0x17, 0x86, 0xd0, 0x86, 0x8a, 0x7a, 0x5a, 0xd2, 0xe9, 0x42, 0x95, 0xeb, 0x9a, 0x91, 0x0f,
	0x62, 0x97, 0x34, 0x9f, 0x9a, 0xad, 0xf2, 0xa1, 0xdd, 0xe7, 0xe6, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x17, 0x6b, 0xb7, 0xe0, 0x5e, 0x01, 0x00, 0x00,
}

func (m *InjectedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InjectedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InjectedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingBlocks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAbci(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PendingBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingBlocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingBlocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		dAtA3 := make([]byte, len(m.BlockHeights)*10)
		var j2 int
		for _, num1 := range m.BlockHeights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintAbci(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnprovenBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnprovenBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnprovenBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintAbci(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintAbci(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAbci(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbci(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InjectedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingBlocks.Size()
	n += 1 + l + sovAbci(uint64(l))
	return n
}

func (m *PendingBlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		l = 0
		for _, e := range m.BlockHeights {
			l += sovAbci(uint64(e))
		}
		n += 1 + sovAbci(uint64(l)) + l
	}
	return n
}

func (m *UnprovenBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovAbci(uint64(m.Height))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovAbci(uint64(l))
	}
	return n
}

func sovAbci(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbci(x uint64) (n int) {
	return sovAbci(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InjectedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InjectedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InjectedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbci
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockHeights = append(m.BlockHeights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAbci
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAbci
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAbci
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockHeights) == 0 {
					m.BlockHeights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAbci
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockHeights = append(m.BlockHeights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnprovenBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnprovenBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnprovenBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbci
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbci(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbci
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbci
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbci
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbci
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbci        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbci          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbci = fmt.Errorf("proto: unexpected end of group")
)
