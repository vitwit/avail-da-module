// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	codec "github.com/cosmos/cosmos-sdk/codec"

	coretypes "github.com/cometbft/cometbft/rpc/core/types"

	local "github.com/vitwit/avail-da-module/relayer/local"

	mock "github.com/stretchr/testify/mock"
)

// CosmosProvider is an autogenerated mock type for the CosmosProvider type
type CosmosProvider struct {
	mock.Mock
}

// GetBlockAtHeight provides a mock function with given fields: ctx, height
func (_m *CosmosProvider) GetBlockAtHeight(ctx context.Context, height int64) (*coretypes.ResultBlock, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockAtHeight")
	}

	var r0 *coretypes.ResultBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*coretypes.ResultBlock, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *coretypes.ResultBlock); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodec provides a mock function with given fields:
func (_m *CosmosProvider) GetCodec() codec.BinaryCodec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCodec")
	}

	var r0 codec.BinaryCodec
	if rf, ok := ret.Get(0).(func() codec.BinaryCodec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(codec.BinaryCodec)
		}
	}

	return r0
}

// GetRPCClient provides a mock function with given fields:
func (_m *CosmosProvider) GetRPCClient() local.RPCClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRPCClient")
	}

	var r0 local.RPCClient
	if rf, ok := ret.Get(0).(func() local.RPCClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(local.RPCClient)
		}
	}

	return r0
}

// QueryABCI provides a mock function with given fields: ctx, path, data
func (_m *CosmosProvider) QueryABCI(ctx context.Context, path string, data []byte) ([]byte, error) {
	ret := _m.Called(ctx, path, data)

	if len(ret) == 0 {
		panic("no return value specified for QueryABCI")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) ([]byte, error)); ok {
		return rf(ctx, path, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(ctx, path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCosmosProvider creates a new instance of CosmosProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCosmosProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *CosmosProvider {
	mock := &CosmosProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
