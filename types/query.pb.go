// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sdk/avail/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuerySubmitBlobStatusRequest is the request type for the SubmitBlobStatus RPC method.
type QuerySubmittedBlobStatusRequest struct {
}

func (m *QuerySubmittedBlobStatusRequest) Reset()         { *m = QuerySubmittedBlobStatusRequest{} }
func (m *QuerySubmittedBlobStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubmittedBlobStatusRequest) ProtoMessage()    {}
func (*QuerySubmittedBlobStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{0}
}
func (m *QuerySubmittedBlobStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubmittedBlobStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubmittedBlobStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubmittedBlobStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubmittedBlobStatusRequest.Merge(m, src)
}
func (m *QuerySubmittedBlobStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubmittedBlobStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubmittedBlobStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubmittedBlobStatusRequest proto.InternalMessageInfo

// QuerySubmitBlobStatusResponse is the response type for the SubmitBlobStatus RPC method.
type QuerySubmittedBlobStatusResponse struct {
	// range specifies the range of blocks that are being submitted.
	// It contains information about the starting and ending block heights.
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// status indicates the current status of the blob submission.
	// Possible values might include statuses like "pending", "in_voting", "success", or "failure".
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// proven_height represents the height up to which data has been successfully proven.
	// This height indicates the extent of posted data to avail light client.
	ProvenHeight uint64 `protobuf:"varint,3,opt,name=proven_height,json=provenHeight,proto3" json:"proven_height,omitempty"`
	// voting_ends_at denotes the block height at which the last voting on the blob ended.
	// This provides information on when the last voting period for the blob concluded.
	VotingEndsAt string `protobuf:"bytes,4,opt,name=voting_ends_at,json=votingEndsAt,proto3" json:"voting_ends_at,omitempty"`
}

func (m *QuerySubmittedBlobStatusResponse) Reset()         { *m = QuerySubmittedBlobStatusResponse{} }
func (m *QuerySubmittedBlobStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubmittedBlobStatusResponse) ProtoMessage()    {}
func (*QuerySubmittedBlobStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{1}
}
func (m *QuerySubmittedBlobStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubmittedBlobStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubmittedBlobStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubmittedBlobStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubmittedBlobStatusResponse.Merge(m, src)
}
func (m *QuerySubmittedBlobStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubmittedBlobStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubmittedBlobStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubmittedBlobStatusResponse proto.InternalMessageInfo

func (m *QuerySubmittedBlobStatusResponse) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *QuerySubmittedBlobStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QuerySubmittedBlobStatusResponse) GetProvenHeight() uint64 {
	if m != nil {
		return m.ProvenHeight
	}
	return 0
}

func (m *QuerySubmittedBlobStatusResponse) GetVotingEndsAt() string {
	if m != nil {
		return m.VotingEndsAt
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySubmittedBlobStatusRequest)(nil), "sdk.avail.v1beta1.QuerySubmittedBlobStatusRequest")
	proto.RegisterType((*QuerySubmittedBlobStatusResponse)(nil), "sdk.avail.v1beta1.QuerySubmittedBlobStatusResponse")
}

func init() { proto.RegisterFile("sdk/avail/v1beta1/query.proto", fileDescriptor_30ff5d91ce731c68) }

var fileDescriptor_30ff5d91ce731c68 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x18, 0x85, 0x3b, 0xbd, 0x6d, 0xe1, 0xce, 0xed, 0x15, 0x1c, 0x41, 0x42, 0xd0, 0x18, 0x5b, 0xc5,
	0x82, 0x34, 0xa1, 0xed, 0x13, 0xb4, 0x20, 0xb8, 0x35, 0xdd, 0xb9, 0x29, 0x13, 0x33, 0xa4, 0x43,
	0xd3, 0x99, 0x34, 0xf3, 0x27, 0xda, 0xad, 0x4f, 0x20, 0xf8, 0x18, 0xae, 0xfb, 0x0e, 0x2e, 0x0b,
	0x6e, 0x5c, 0x4a, 0xeb, 0x83, 0x48, 0x33, 0x45, 0x17, 0xad, 0x88, 0xcb, 0x39, 0x67, 0xce, 0xc7,
	0xe1, 0x3f, 0xf8, 0x50, 0x05, 0x23, 0x97, 0x66, 0x94, 0x47, 0x6e, 0xd6, 0xf2, 0x19, 0xd0, 0x96,
	0x3b, 0x49, 0x59, 0x32, 0x75, 0xe2, 0x44, 0x82, 0x24, 0xbb, 0x2a, 0x18, 0x39, 0xb9, 0xed, 0xac,
	0x6d, 0xf3, 0x20, 0x94, 0x32, 0x8c, 0x98, 0x4b, 0x63, 0xee, 0x52, 0x21, 0x24, 0x50, 0xe0, 0x52,
	0x28, 0x1d, 0x30, 0xcd, 0x4d, 0x1e, 0xdc, 0x69, 0xaf, 0x76, 0x8c, 0x8f, 0xae, 0x56, 0xec, 0x7e,
	0xea, 0x8f, 0x39, 0x00, 0x0b, 0x7a, 0x91, 0xf4, 0xfb, 0x40, 0x21, 0x55, 0x1e, 0x9b, 0xa4, 0x4c,
	0x41, 0x6d, 0x86, 0xb0, 0xfd, 0xfd, 0x1f, 0x15, 0x4b, 0xa1, 0x18, 0x71, 0x70, 0x39, 0xa1, 0x22,
	0x64, 0x06, 0xb2, 0x51, 0xe3, 0x5f, 0xdb, 0x70, 0x36, 0x4a, 0x3a, 0xde, 0xca, 0xf7, 0xf4, 0x37,
	0xb2, 0x8f, 0x2b, 0x2a, 0x27, 0x18, 0x45, 0x1b, 0x35, 0xfe, 0x7a, 0xeb, 0x17, 0xa9, 0xe3, 0xff,
	0x71, 0x22, 0x33, 0x26, 0x06, 0x43, 0xc6, 0xc3, 0x21, 0x18, 0x7f, 0x6c, 0xd4, 0x28, 0x79, 0x55,
	0x2d, 0x5e, 0xe6, 0x1a, 0x39, 0xc1, 0x3b, 0x99, 0x04, 0x2e, 0xc2, 0x01, 0x13, 0x81, 0x1a, 0x50,
	0x30, 0x4a, 0x39, 0xa4, 0xaa, 0xd5, 0x0b, 0x11, 0xa8, 0x2e, 0xb4, 0x67, 0x08, 0x97, 0xf3, 0xde,
	0xe4, 0x09, 0xe1, 0xbd, 0x2d, 0xe5, 0x49, 0x7b, 0x4b, 0xcb, 0x1f, 0xae, 0x61, 0x76, 0x7e, 0x95,
	0xd1, 0xd7, 0xa9, 0x9d, 0xdf, 0xbf, 0xbc, 0x3f, 0x16, 0x4f, 0x49, 0x5d, 0xcf, 0xe0, 0x47, 0xd2,
	0xff, 0x9c, 0x42, 0xe5, 0xb9, 0xaf, 0x50, 0xaf, 0xfb, 0xbc, 0xb0, 0xd0, 0x7c, 0x61, 0xa1, 0xb7,
	0x85, 0x85, 0x1e, 0x96, 0x56, 0x61, 0xbe, 0xb4, 0x0a, 0xaf, 0x4b, 0xab, 0x70, 0x7d, 0x16, 0x72,
	0x18, 0xa6, 0xbe, 0x73, 0x23, 0xc7, 0x6e, 0xc6, 0xe1, 0x96, 0x83, 0xe6, 0x35, 0x03, 0xda, 0x1c,
	0xcb, 0x20, 0x8d, 0x98, 0x0b, 0xd3, 0x98, 0x29, 0xbf, 0x92, 0x8f, 0xdb, 0xf9, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x72, 0x2f, 0x8e, 0x4a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// SubmitBlobStatus queries the current status of blob submissions.
	SubmittedBlobStatus(ctx context.Context, in *QuerySubmittedBlobStatusRequest, opts ...grpc.CallOption) (*QuerySubmittedBlobStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SubmittedBlobStatus(ctx context.Context, in *QuerySubmittedBlobStatusRequest, opts ...grpc.CallOption) (*QuerySubmittedBlobStatusResponse, error) {
	out := new(QuerySubmittedBlobStatusResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/SubmittedBlobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// SubmitBlobStatus queries the current status of blob submissions.
	SubmittedBlobStatus(context.Context, *QuerySubmittedBlobStatusRequest) (*QuerySubmittedBlobStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SubmittedBlobStatus(ctx context.Context, req *QuerySubmittedBlobStatusRequest) (*QuerySubmittedBlobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmittedBlobStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SubmittedBlobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubmittedBlobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubmittedBlobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/SubmittedBlobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubmittedBlobStatus(ctx, req.(*QuerySubmittedBlobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.avail.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmittedBlobStatus",
			Handler:    _Query_SubmittedBlobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk/avail/v1beta1/query.proto",
}

func (m *QuerySubmittedBlobStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubmittedBlobStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubmittedBlobStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySubmittedBlobStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubmittedBlobStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubmittedBlobStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VotingEndsAt) > 0 {
		i -= len(m.VotingEndsAt)
		copy(dAtA[i:], m.VotingEndsAt)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VotingEndsAt)))
		i--
		dAtA[i] = 0x22
	}
	if m.ProvenHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProvenHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySubmittedBlobStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySubmittedBlobStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ProvenHeight != 0 {
		n += 1 + sovQuery(uint64(m.ProvenHeight))
	}
	l = len(m.VotingEndsAt)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySubmittedBlobStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubmittedBlobStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubmittedBlobStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubmittedBlobStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubmittedBlobStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubmittedBlobStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvenHeight", wireType)
			}
			m.ProvenHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvenHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndsAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingEndsAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
