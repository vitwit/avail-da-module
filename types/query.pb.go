// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sdk/avail/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// query request
type QuerySubmitBlobStatusRequest struct {
}

func (m *QuerySubmitBlobStatusRequest) Reset()         { *m = QuerySubmitBlobStatusRequest{} }
func (m *QuerySubmitBlobStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubmitBlobStatusRequest) ProtoMessage()    {}
func (*QuerySubmitBlobStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{0}
}
func (m *QuerySubmitBlobStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubmitBlobStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubmitBlobStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubmitBlobStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubmitBlobStatusRequest.Merge(m, src)
}
func (m *QuerySubmitBlobStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubmitBlobStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubmitBlobStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubmitBlobStatusRequest proto.InternalMessageInfo

// query response
type QuerySubmitBlobStatusResponse struct {
	Range  *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QuerySubmitBlobStatusResponse) Reset()         { *m = QuerySubmitBlobStatusResponse{} }
func (m *QuerySubmitBlobStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubmitBlobStatusResponse) ProtoMessage()    {}
func (*QuerySubmitBlobStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{1}
}
func (m *QuerySubmitBlobStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubmitBlobStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubmitBlobStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubmitBlobStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubmitBlobStatusResponse.Merge(m, src)
}
func (m *QuerySubmitBlobStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubmitBlobStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubmitBlobStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubmitBlobStatusResponse proto.InternalMessageInfo

func (m *QuerySubmitBlobStatusResponse) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *QuerySubmitBlobStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// QueryValidatorsRequest is the request type for the Query/Validators RPC method.
type QueryValidatorsRequest struct {
}

func (m *QueryValidatorsRequest) Reset()         { *m = QueryValidatorsRequest{} }
func (m *QueryValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsRequest) ProtoMessage()    {}
func (*QueryValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{2}
}
func (m *QueryValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsRequest.Merge(m, src)
}
func (m *QueryValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsRequest proto.InternalMessageInfo

// QueryValidatorResponse is the response type for the Query/Validators RPC method.
type QueryValidatorsResponse struct {
	// validators is the returned validators from the module
	Validators []Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
}

func (m *QueryValidatorsResponse) Reset()         { *m = QueryValidatorsResponse{} }
func (m *QueryValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsResponse) ProtoMessage()    {}
func (*QueryValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{3}
}
func (m *QueryValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsResponse.Merge(m, src)
}
func (m *QueryValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsResponse proto.InternalMessageInfo

func (m *QueryValidatorsResponse) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

// QueryAvailAddressRequest is the request type for the Query/AvailAddress RPC method.
type QueryAvailAddressRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryAvailAddressRequest) Reset()         { *m = QueryAvailAddressRequest{} }
func (m *QueryAvailAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvailAddressRequest) ProtoMessage()    {}
func (*QueryAvailAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{4}
}
func (m *QueryAvailAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailAddressRequest.Merge(m, src)
}
func (m *QueryAvailAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailAddressRequest proto.InternalMessageInfo

func (m *QueryAvailAddressRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryAvailAddressResponse is the response type for the Query/AvailAddress RPC method.
type QueryAvailAddressResponse struct {
	AvailAddress string `protobuf:"bytes,1,opt,name=avail_address,json=availAddress,proto3" json:"avail_address,omitempty"`
}

func (m *QueryAvailAddressResponse) Reset()         { *m = QueryAvailAddressResponse{} }
func (m *QueryAvailAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvailAddressResponse) ProtoMessage()    {}
func (*QueryAvailAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{5}
}
func (m *QueryAvailAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailAddressResponse.Merge(m, src)
}
func (m *QueryAvailAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailAddressResponse proto.InternalMessageInfo

func (m *QueryAvailAddressResponse) GetAvailAddress() string {
	if m != nil {
		return m.AvailAddress
	}
	return ""
}

// proven Height
type QueryProvenHeightRequest struct {
}

func (m *QueryProvenHeightRequest) Reset()         { *m = QueryProvenHeightRequest{} }
func (m *QueryProvenHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProvenHeightRequest) ProtoMessage()    {}
func (*QueryProvenHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{6}
}
func (m *QueryProvenHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvenHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvenHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvenHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvenHeightRequest.Merge(m, src)
}
func (m *QueryProvenHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvenHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvenHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvenHeightRequest proto.InternalMessageInfo

type QueryProvenHeightResponse struct {
	ProvenHeight int64 `protobuf:"varint,1,opt,name=proven_height,json=provenHeight,proto3" json:"proven_height,omitempty"`
}

func (m *QueryProvenHeightResponse) Reset()         { *m = QueryProvenHeightResponse{} }
func (m *QueryProvenHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProvenHeightResponse) ProtoMessage()    {}
func (*QueryProvenHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{7}
}
func (m *QueryProvenHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvenHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvenHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvenHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvenHeightResponse.Merge(m, src)
}
func (m *QueryProvenHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvenHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvenHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvenHeightResponse proto.InternalMessageInfo

func (m *QueryProvenHeightResponse) GetProvenHeight() int64 {
	if m != nil {
		return m.ProvenHeight
	}
	return 0
}

type BlockWithExpiration struct {
	Height     int64     `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Expiration time.Time `protobuf:"bytes,2,opt,name=expiration,proto3,stdtime" json:"expiration"`
}

func (m *BlockWithExpiration) Reset()         { *m = BlockWithExpiration{} }
func (m *BlockWithExpiration) String() string { return proto.CompactTextString(m) }
func (*BlockWithExpiration) ProtoMessage()    {}
func (*BlockWithExpiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{8}
}
func (m *BlockWithExpiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockWithExpiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockWithExpiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockWithExpiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockWithExpiration.Merge(m, src)
}
func (m *BlockWithExpiration) XXX_Size() int {
	return m.Size()
}
func (m *BlockWithExpiration) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockWithExpiration.DiscardUnknown(m)
}

var xxx_messageInfo_BlockWithExpiration proto.InternalMessageInfo

func (m *BlockWithExpiration) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockWithExpiration) GetExpiration() time.Time {
	if m != nil {
		return m.Expiration
	}
	return time.Time{}
}

type QueryPendingBlocksRequest struct {
}

func (m *QueryPendingBlocksRequest) Reset()         { *m = QueryPendingBlocksRequest{} }
func (m *QueryPendingBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBlocksRequest) ProtoMessage()    {}
func (*QueryPendingBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{9}
}
func (m *QueryPendingBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBlocksRequest.Merge(m, src)
}
func (m *QueryPendingBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBlocksRequest proto.InternalMessageInfo

type QueryPendingBlocksResponse struct {
	PendingBlocks []*BlockWithExpiration `protobuf:"bytes,1,rep,name=pending_blocks,json=pendingBlocks,proto3" json:"pending_blocks,omitempty"`
}

func (m *QueryPendingBlocksResponse) Reset()         { *m = QueryPendingBlocksResponse{} }
func (m *QueryPendingBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingBlocksResponse) ProtoMessage()    {}
func (*QueryPendingBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{10}
}
func (m *QueryPendingBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingBlocksResponse.Merge(m, src)
}
func (m *QueryPendingBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingBlocksResponse proto.InternalMessageInfo

func (m *QueryPendingBlocksResponse) GetPendingBlocks() []*BlockWithExpiration {
	if m != nil {
		return m.PendingBlocks
	}
	return nil
}

type QueryExpiredBlocksRequest struct {
}

func (m *QueryExpiredBlocksRequest) Reset()         { *m = QueryExpiredBlocksRequest{} }
func (m *QueryExpiredBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBlocksRequest) ProtoMessage()    {}
func (*QueryExpiredBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{11}
}
func (m *QueryExpiredBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBlocksRequest.Merge(m, src)
}
func (m *QueryExpiredBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBlocksRequest proto.InternalMessageInfo

type QueryExpiredBlocksResponse struct {
	CurrentTime   time.Time              `protobuf:"bytes,1,opt,name=current_time,json=currentTime,proto3,stdtime" json:"current_time"`
	ExpiredBlocks []*BlockWithExpiration `protobuf:"bytes,2,rep,name=expired_blocks,json=expiredBlocks,proto3" json:"expired_blocks,omitempty"`
}

func (m *QueryExpiredBlocksResponse) Reset()         { *m = QueryExpiredBlocksResponse{} }
func (m *QueryExpiredBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBlocksResponse) ProtoMessage()    {}
func (*QueryExpiredBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ff5d91ce731c68, []int{12}
}
func (m *QueryExpiredBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBlocksResponse.Merge(m, src)
}
func (m *QueryExpiredBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBlocksResponse proto.InternalMessageInfo

func (m *QueryExpiredBlocksResponse) GetCurrentTime() time.Time {
	if m != nil {
		return m.CurrentTime
	}
	return time.Time{}
}

func (m *QueryExpiredBlocksResponse) GetExpiredBlocks() []*BlockWithExpiration {
	if m != nil {
		return m.ExpiredBlocks
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySubmitBlobStatusRequest)(nil), "sdk.avail.v1beta1.QuerySubmitBlobStatusRequest")
	proto.RegisterType((*QuerySubmitBlobStatusResponse)(nil), "sdk.avail.v1beta1.QuerySubmitBlobStatusResponse")
	proto.RegisterType((*QueryValidatorsRequest)(nil), "sdk.avail.v1beta1.QueryValidatorsRequest")
	proto.RegisterType((*QueryValidatorsResponse)(nil), "sdk.avail.v1beta1.QueryValidatorsResponse")
	proto.RegisterType((*QueryAvailAddressRequest)(nil), "sdk.avail.v1beta1.QueryAvailAddressRequest")
	proto.RegisterType((*QueryAvailAddressResponse)(nil), "sdk.avail.v1beta1.QueryAvailAddressResponse")
	proto.RegisterType((*QueryProvenHeightRequest)(nil), "sdk.avail.v1beta1.QueryProvenHeightRequest")
	proto.RegisterType((*QueryProvenHeightResponse)(nil), "sdk.avail.v1beta1.QueryProvenHeightResponse")
	proto.RegisterType((*BlockWithExpiration)(nil), "sdk.avail.v1beta1.BlockWithExpiration")
	proto.RegisterType((*QueryPendingBlocksRequest)(nil), "sdk.avail.v1beta1.QueryPendingBlocksRequest")
	proto.RegisterType((*QueryPendingBlocksResponse)(nil), "sdk.avail.v1beta1.QueryPendingBlocksResponse")
	proto.RegisterType((*QueryExpiredBlocksRequest)(nil), "sdk.avail.v1beta1.QueryExpiredBlocksRequest")
	proto.RegisterType((*QueryExpiredBlocksResponse)(nil), "sdk.avail.v1beta1.QueryExpiredBlocksResponse")
}

func init() { proto.RegisterFile("sdk/avail/v1beta1/query.proto", fileDescriptor_30ff5d91ce731c68) }

var fileDescriptor_30ff5d91ce731c68 = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0x9b, 0xed, 0xb7, 0xfd, 0x98, 0xdb, 0xa1, 0xcd, 0xa0, 0x51, 0xc2, 0xd6, 0x76, 0x99,
	0x06, 0x1d, 0x63, 0x09, 0x2b, 0x6f, 0x80, 0x55, 0xa0, 0x71, 0x41, 0x82, 0x0c, 0x81, 0x84, 0x84,
	0x2a, 0x67, 0x31, 0x69, 0xd4, 0x36, 0xce, 0x62, 0xa7, 0x6c, 0x57, 0x8e, 0x9c, 0x26, 0xed, 0x80,
	0xb8, 0xf2, 0x1a, 0x78, 0x11, 0x3b, 0x4e, 0xe2, 0xc2, 0x09, 0xd0, 0xc6, 0x0b, 0x41, 0x71, 0x9c,
	0x2c, 0x69, 0x9d, 0xa9, 0xdc, 0x9a, 0x7e, 0x9f, 0x3f, 0x9f, 0xc7, 0xf6, 0xf7, 0x01, 0x2b, 0xd4,
	0xee, 0x19, 0x68, 0x88, 0xdc, 0xbe, 0x31, 0xdc, 0xb6, 0x30, 0x43, 0xdb, 0xc6, 0x41, 0x88, 0x83,
	0x23, 0xdd, 0x0f, 0x08, 0x23, 0x70, 0x91, 0xda, 0x3d, 0x9d, 0xcb, 0xba, 0x90, 0xd5, 0x9b, 0x0e,
	0x71, 0x08, 0x57, 0x8d, 0xe8, 0x57, 0x1c, 0xa8, 0x2e, 0x3b, 0x84, 0x38, 0x7d, 0x6c, 0x20, 0xdf,
	0x35, 0x90, 0xe7, 0x11, 0x86, 0x98, 0x4b, 0x3c, 0x2a, 0xd4, 0xd5, 0xf1, 0x2e, 0x43, 0xd4, 0x77,
	0x6d, 0xc4, 0x48, 0x20, 0x42, 0xea, 0xa2, 0x00, 0xff, 0xb2, 0xc2, 0xf7, 0x06, 0x73, 0x07, 0x98,
	0x32, 0x34, 0xf0, 0x45, 0x80, 0x3a, 0x5e, 0x83, 0x1d, 0xc6, 0x9a, 0x56, 0x03, 0xcb, 0x2f, 0x23,
	0xea, 0xbd, 0xd0, 0x1a, 0xb8, 0xac, 0xdd, 0x27, 0xd6, 0x1e, 0x43, 0x2c, 0xa4, 0x26, 0x3e, 0x08,
	0x31, 0x65, 0x9a, 0x03, 0x56, 0x0a, 0x74, 0xea, 0x13, 0x8f, 0x62, 0xa8, 0x83, 0x99, 0x00, 0x79,
	0x0e, 0xae, 0x2a, 0x0d, 0xa5, 0x59, 0x6e, 0x55, 0xf5, 0xb1, 0xb9, 0x75, 0x33, 0xd2, 0xcd, 0x38,
	0x0c, 0x2e, 0x81, 0x59, 0xca, 0x2b, 0x54, 0xa7, 0x1a, 0x4a, 0x73, 0xce, 0x14, 0x5f, 0x5a, 0x15,
	0x2c, 0xf1, 0x46, 0xaf, 0x93, 0xe9, 0x52, 0x84, 0x77, 0xe0, 0xd6, 0x98, 0x22, 0x9a, 0xb7, 0x01,
	0x48, 0x4f, 0x83, 0x56, 0x95, 0xc6, 0x74, 0xb3, 0xdc, 0x5a, 0x96, 0x10, 0xa4, 0xa9, 0xed, 0xff,
	0x4e, 0x7f, 0xd6, 0x4b, 0x66, 0x26, 0x4b, 0xdb, 0x05, 0x55, 0x5e, 0x7e, 0x27, 0xca, 0xd8, 0xb1,
	0xed, 0x00, 0xd3, 0xa4, 0x35, 0xdc, 0x04, 0x8b, 0x69, 0x64, 0x07, 0xc5, 0x1a, 0x1f, 0x74, 0xce,
	0x5c, 0x48, 0x05, 0x91, 0xa3, 0x3d, 0x06, 0xb7, 0x25, 0x85, 0x04, 0xe9, 0x1a, 0x98, 0xe7, 0x48,
	0x23, 0x55, 0x2a, 0x28, 0x13, 0xac, 0xa9, 0x02, 0xe5, 0x45, 0x40, 0x86, 0xd8, 0x7b, 0x86, 0x5d,
	0xa7, 0xcb, 0x92, 0x53, 0x48, 0xaa, 0xe7, 0xb5, 0xcb, 0xea, 0x3e, 0xff, 0xbf, 0xd3, 0xe5, 0x02,
	0xaf, 0x3e, 0x6d, 0x56, 0xfc, 0x4c, 0xb0, 0x46, 0xc1, 0x8d, 0x76, 0x9f, 0xec, 0xf7, 0xde, 0xb8,
	0xac, 0xfb, 0xf4, 0xd0, 0x77, 0x03, 0xfe, 0xd0, 0xa2, 0x0b, 0xc9, 0x25, 0x89, 0x2f, 0xf8, 0x04,
	0x00, 0x9c, 0x46, 0xf1, 0xcb, 0x2a, 0xb7, 0x54, 0x3d, 0x7e, 0x6b, 0x7a, 0xf2, 0xd6, 0xf4, 0x57,
	0xc9, 0x5b, 0x6b, 0x5f, 0x8b, 0x4e, 0xf6, 0xf8, 0x57, 0x5d, 0x31, 0x33, 0x79, 0xda, 0x9d, 0x04,
	0x1b, 0x7b, 0xb6, 0xeb, 0x39, 0x1c, 0x20, 0xbd, 0xd9, 0x1e, 0x50, 0x65, 0xa2, 0x18, 0xea, 0x39,
	0xb8, 0xee, 0xc7, 0x42, 0xc7, 0xe2, 0x8a, 0xb8, 0xe0, 0xbb, 0x92, 0x0b, 0x96, 0x0c, 0x66, 0xce,
	0xfb, 0xd9, 0xb2, 0x29, 0x09, 0x8f, 0xc0, 0x76, 0x9e, 0xe4, 0x9b, 0x22, 0x50, 0x46, 0x54, 0x81,
	0xb2, 0x0b, 0x2a, 0xfb, 0x61, 0x10, 0x60, 0x8f, 0x75, 0x22, 0x73, 0x89, 0xb7, 0x3e, 0xd9, 0x69,
	0x94, 0x45, 0x66, 0xa4, 0x45, 0x33, 0xe1, 0xb8, 0x43, 0x32, 0xd3, 0xd4, 0xbf, 0xcd, 0x84, 0xb3,
	0x7c, 0xad, 0x2f, 0xff, 0x83, 0x19, 0x8e, 0x0d, 0xbf, 0x2a, 0x60, 0x61, 0xd4, 0xa3, 0xd0, 0x90,
	0x54, 0xbd, 0xca, 0xed, 0xea, 0xc3, 0xc9, 0x13, 0xe2, 0x93, 0xd1, 0x36, 0x3f, 0x7e, 0xff, 0x73,
	0x32, 0xb5, 0x0e, 0xd7, 0xe2, 0x05, 0x63, 0xf5, 0x89, 0x95, 0x2e, 0x19, 0x3a, 0xca, 0xf3, 0x49,
	0x01, 0xe0, 0xd2, 0xc5, 0x70, 0xa3, 0xa8, 0xdb, 0xd8, 0x0e, 0x50, 0xef, 0x4f, 0x12, 0x2a, 0x90,
	0xd6, 0x39, 0x52, 0x1d, 0xae, 0x48, 0x90, 0x2e, 0x7d, 0x0f, 0x4f, 0x14, 0x50, 0xc9, 0x5a, 0x15,
	0x6e, 0x16, 0xf5, 0x90, 0x6c, 0x06, 0xf5, 0xc1, 0x64, 0xc1, 0x02, 0xa9, 0xc9, 0x91, 0x34, 0xd8,
	0x90, 0x20, 0xe5, 0xd6, 0x02, 0xa7, 0xca, 0x5a, 0xbc, 0x98, 0x4a, 0xb2, 0x24, 0x8a, 0xa9, 0x64,
	0x5b, 0xe3, 0x4a, 0xaa, 0xdc, 0x3a, 0x81, 0x9f, 0x15, 0x30, 0x9f, 0x33, 0x29, 0x2c, 0xee, 0x24,
	0x31, 0xba, 0xba, 0x35, 0x61, 0xb4, 0x00, 0xdb, 0xe0, 0x60, 0x6b, 0x70, 0x55, 0x06, 0x96, 0x5b,
	0x09, 0x9c, 0x2c, 0xe7, 0xd9, 0x62, 0x32, 0x99, 0xf1, 0x8b, 0xc9, 0xa4, 0x8b, 0xe0, 0x4a, 0xb2,
	0xbc, 0xb1, 0xdb, 0x3b, 0xa7, 0xe7, 0x35, 0xe5, 0xec, 0xbc, 0xa6, 0xfc, 0x3e, 0xaf, 0x29, 0xc7,
	0x17, 0xb5, 0xd2, 0xd9, 0x45, 0xad, 0xf4, 0xe3, 0xa2, 0x56, 0x7a, 0x7b, 0xcf, 0x71, 0x59, 0x37,
	0xb4, 0xf4, 0x7d, 0x32, 0x30, 0x86, 0x2e, 0xfb, 0xe0, 0xb2, 0xb8, 0xda, 0x96, 0x8d, 0xb6, 0x06,
	0xc4, 0x0e, 0xfb, 0xd8, 0x60, 0x47, 0x3e, 0xa6, 0xd6, 0x2c, 0x5f, 0x2c, 0x8f, 0xfe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x9d, 0xb6, 0x54, 0x6b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// submit Blob Status
	SubmitBlobStatus(ctx context.Context, in *QuerySubmitBlobStatusRequest, opts ...grpc.CallOption) (*QuerySubmitBlobStatusResponse, error)
	// Validators returns registered validators of the module.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Todo: will be removed
	AvailAddress(ctx context.Context, in *QueryAvailAddressRequest, opts ...grpc.CallOption) (*QueryAvailAddressResponse, error)
	// proven height
	ProvenHeight(ctx context.Context, in *QueryProvenHeightRequest, opts ...grpc.CallOption) (*QueryProvenHeightResponse, error)
	// pending blocks
	PendingBlocks(ctx context.Context, in *QueryPendingBlocksRequest, opts ...grpc.CallOption) (*QueryPendingBlocksResponse, error)
	// expired blocks
	ExpiredBlocks(ctx context.Context, in *QueryExpiredBlocksRequest, opts ...grpc.CallOption) (*QueryExpiredBlocksResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SubmitBlobStatus(ctx context.Context, in *QuerySubmitBlobStatusRequest, opts ...grpc.CallOption) (*QuerySubmitBlobStatusResponse, error) {
	out := new(QuerySubmitBlobStatusResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/SubmitBlobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AvailAddress(ctx context.Context, in *QueryAvailAddressRequest, opts ...grpc.CallOption) (*QueryAvailAddressResponse, error) {
	out := new(QueryAvailAddressResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/AvailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProvenHeight(ctx context.Context, in *QueryProvenHeightRequest, opts ...grpc.CallOption) (*QueryProvenHeightResponse, error) {
	out := new(QueryProvenHeightResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/ProvenHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingBlocks(ctx context.Context, in *QueryPendingBlocksRequest, opts ...grpc.CallOption) (*QueryPendingBlocksResponse, error) {
	out := new(QueryPendingBlocksResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/PendingBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredBlocks(ctx context.Context, in *QueryExpiredBlocksRequest, opts ...grpc.CallOption) (*QueryExpiredBlocksResponse, error) {
	out := new(QueryExpiredBlocksResponse)
	err := c.cc.Invoke(ctx, "/sdk.avail.v1beta1.Query/ExpiredBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// submit Blob Status
	SubmitBlobStatus(context.Context, *QuerySubmitBlobStatusRequest) (*QuerySubmitBlobStatusResponse, error)
	// Validators returns registered validators of the module.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Todo: will be removed
	AvailAddress(context.Context, *QueryAvailAddressRequest) (*QueryAvailAddressResponse, error)
	// proven height
	ProvenHeight(context.Context, *QueryProvenHeightRequest) (*QueryProvenHeightResponse, error)
	// pending blocks
	PendingBlocks(context.Context, *QueryPendingBlocksRequest) (*QueryPendingBlocksResponse, error)
	// expired blocks
	ExpiredBlocks(context.Context, *QueryExpiredBlocksRequest) (*QueryExpiredBlocksResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SubmitBlobStatus(ctx context.Context, req *QuerySubmitBlobStatusRequest) (*QuerySubmitBlobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlobStatus not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) AvailAddress(ctx context.Context, req *QueryAvailAddressRequest) (*QueryAvailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailAddress not implemented")
}
func (*UnimplementedQueryServer) ProvenHeight(ctx context.Context, req *QueryProvenHeightRequest) (*QueryProvenHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvenHeight not implemented")
}
func (*UnimplementedQueryServer) PendingBlocks(ctx context.Context, req *QueryPendingBlocksRequest) (*QueryPendingBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingBlocks not implemented")
}
func (*UnimplementedQueryServer) ExpiredBlocks(ctx context.Context, req *QueryExpiredBlocksRequest) (*QueryExpiredBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredBlocks not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SubmitBlobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubmitBlobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubmitBlobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/SubmitBlobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubmitBlobStatus(ctx, req.(*QuerySubmitBlobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AvailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AvailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/AvailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AvailAddress(ctx, req.(*QueryAvailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProvenHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvenHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProvenHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/ProvenHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProvenHeight(ctx, req.(*QueryProvenHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/PendingBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingBlocks(ctx, req.(*QueryPendingBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiredBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.avail.v1beta1.Query/ExpiredBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredBlocks(ctx, req.(*QueryExpiredBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.avail.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlobStatus",
			Handler:    _Query_SubmitBlobStatus_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "AvailAddress",
			Handler:    _Query_AvailAddress_Handler,
		},
		{
			MethodName: "ProvenHeight",
			Handler:    _Query_ProvenHeight_Handler,
		},
		{
			MethodName: "PendingBlocks",
			Handler:    _Query_PendingBlocks_Handler,
		},
		{
			MethodName: "ExpiredBlocks",
			Handler:    _Query_ExpiredBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk/avail/v1beta1/query.proto",
}

func (m *QuerySubmitBlobStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubmitBlobStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubmitBlobStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySubmitBlobStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubmitBlobStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubmitBlobStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailAddress) > 0 {
		i -= len(m.AvailAddress)
		copy(dAtA[i:], m.AvailAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProvenHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvenHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvenHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProvenHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvenHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvenHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProvenHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProvenHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockWithExpiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockWithExpiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockWithExpiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingBlocks) > 0 {
		for iNdEx := len(m.PendingBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpiredBlocks) > 0 {
		for iNdEx := len(m.ExpiredBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CurrentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CurrentTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintQuery(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySubmitBlobStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySubmitBlobStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAvailAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAvailAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvailAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProvenHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProvenHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProvenHeight != 0 {
		n += 1 + sovQuery(uint64(m.ProvenHeight))
	}
	return n
}

func (m *BlockWithExpiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPendingBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingBlocks) > 0 {
		for _, e := range m.PendingBlocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryExpiredBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExpiredBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CurrentTime)
	n += 1 + l + sovQuery(uint64(l))
	if len(m.ExpiredBlocks) > 0 {
		for _, e := range m.ExpiredBlocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySubmitBlobStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubmitBlobStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubmitBlobStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubmitBlobStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubmitBlobStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubmitBlobStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvenHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvenHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvenHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvenHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvenHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvenHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvenHeight", wireType)
			}
			m.ProvenHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvenHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockWithExpiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockWithExpiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockWithExpiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingBlocks = append(m.PendingBlocks, &BlockWithExpiration{})
			if err := m.PendingBlocks[len(m.PendingBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CurrentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredBlocks = append(m.ExpiredBlocks, &BlockWithExpiration{})
			if err := m.ExpiredBlocks[len(m.ExpiredBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
